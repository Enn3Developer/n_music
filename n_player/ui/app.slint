import { VerticalBox, ScrollView, ListView, Button, HorizontalBox, Slider, Palette, LineEdit, ProgressIndicator } from "std-widgets.slint";

struct TrackData {
    title: string,
    artist: string,
    time: string,
    cover: image,
    index: int,
}

component Track {
    in property <TrackData> track;
    in property <bool> playing;
    callback clicked();
    TouchArea {
        clicked => {
            clicked()
        }

        box := Rectangle {
            background: playing ? Palette.accent-background : Palette.background;
            border-color: Palette.border;
            border-width: parent.has-hover ? 2px : 0px;
            HorizontalLayout {
                spacing: 10px;
                padding: 10px;
                padding-left: playing ? 20px : 10px;
                Image {
                    width: 64px;
                    height: 64px;
                    source: track.cover;
                }

                VerticalLayout {
                    alignment: center;
                    Text {
                        color: playing ? Palette.accent-foreground : Palette.foreground;
                        text: track.title;
                        overflow: elide;
                        font-size: 12px;
                        max-width: box.width * 60%;
                    }

                    Text {
                        text: track.artist;
                        overflow: elide;
                        color: playing ? Palette.accent-foreground : Palette.foreground;
                        font-size: 12px;
                        max-width: box.width * 60%;
                    }
                }

                Text {
                    text: track.time;
                    color: playing ? Palette.accent-foreground : Palette.foreground;
                    vertical-alignment: center;
                    horizontal-alignment: right;
                    font-size: 10px;
                }
            }
        }
    }
}

component ControlPanel {
    in property <TrackData> track;
    in property <bool> playback;
    in property <string> position_time;
    in property <float> time;
    in property <float> length;
    in property <float> volume;
    callback play_previous();
    callback toggle_pause();
    callback play_next();
    callback seek(float);
    callback set_volume(float);
    control-panel := HorizontalLayout {
        spacing: 10px;
        padding: 10px;
        Image {
            width: 72px;
            height: 72px;
            source: track.cover;
        }

        VerticalLayout {
            HorizontalLayout {
                spacing: 10px;
                alignment: end;
                Text {
                    vertical-alignment: center;
                    text: position_time;
                }

                Slider {
                    minimum: 0.0;
                    maximum: length;
                    width: control-panel.width * 24%;
                    value: time;
                    changed(value) => {
                        seek(value)
                    }
                }

                Text {
                    vertical-alignment: center;
                    text: track.time;
                }

                Slider {
                    minimum: 0.0;
                    maximum: 1.0;
                    width: control-panel.width * 24%;
                    value: volume;
                    changed(value) => {
                        set_volume(value)
                    }
                }

                Text {
                    vertical-alignment: center;
                    text: round(volume * 100.0) + "%";
                }
            }

            HorizontalLayout {
                VerticalLayout {
                    alignment: center;
                    Text {
                        text: track.title;
                        overflow: elide;
                        font-size: 12px;
                        max-width: control-panel.width * 40%;
                    }

                    Text {
                        text: track.artist;
                        overflow: elide;
                        font-size: 12px;
                        max-width: control-panel.width * 40%;
                    }
                }

                HorizontalLayout {
                    alignment: end;
                    spacing: 10px;
                    Button {
                        icon: @image-url("../assets/icons/previous.svg");
                        clicked => {
                            play_previous()
                        }
                    }

                    Button {
                        icon: playback ? @image-url("../assets/icons/pause.svg") : @image-url("../assets/icons/play.svg");
                        clicked => {
                            toggle_pause()
                        }
                    }

                    Button {
                        icon: @image-url("../assets/icons/next.svg");
                        clicked => {
                            play_next()
                        }
                    }
                }
            }
        }
    }
}

component Separator {
    HorizontalLayout {
        alignment: center;
        padding-top: parent.padding-top;
        padding-bottom: parent.padding-bottom;
        Rectangle {
            width: parent.width - 20px;
            height: 1px;
            background: Palette.alternate-background;
        }
    }
}

component TopPanel {
    in property <float> progress;
    callback searching(string);
    VerticalLayout {
        spacing: 10px;
        padding: 10px;
        padding-bottom: 5px;
        HorizontalLayout {
            spacing: 10px;
            LineEdit {
                placeholder-text: "Search...";
                edited(value) => {
                    searching(value)
                }
            }

            Button {
                icon: @image-url("../assets/icons/settings.svg");
            }
        }

        ProgressIndicator {
            progress: progress;
        }
    }
}

export component MainWindow inherits Window {
    in property <[TrackData]> tracks;
    in property <int> playing;
    in property <TrackData> playing_track;
    in property <bool> playback;
    in property <string> position_time;
    in property <float> time;
    in property <float> length;
    in property <float> volume;
    in property <string> version;
    in property <ColorScheme> color-scheme <=> Palette.color-scheme;
    in property <float> progress;
    callback clicked(int);
    callback play_previous();
    callback toggle_pause();
    callback play_next();
    callback seek(float);
    callback set_volume(float);
    callback searching(string);
    title: "N Music v" + version;
    preferred-width: 450px;
    preferred-height: 600px;
    min-width: 400px;
    min-height: 300px;
    VerticalLayout {
        top-panel := TopPanel {
            progress: progress;
            searching(value) => {
                searching(value)
            }
        }

        ListView {
            viewport-width: parent.width - 20px;
            for track[i] in tracks: Track {
                track: track;
                playing: playing == track.index;
                clicked => {
                    clicked(track.index)
                }
            }
        }

        Separator {
            padding-top: 5px;
        }

        control_panel := ControlPanel {
            track: playing_track;
            playback: playback;
            position_time: position_time;
            time: time;
            length: length;
            volume: volume;
            play_previous => {
                play_previous()
            }
            toggle_pause => {
                toggle_pause()
            }
            play_next => {
                play_next()
            }
            seek(value) => {
                seek(value)
            }
            set_volume(value) => {
                set_volume(value)
            }
        }
    }
}
